AIM: IMPLEMENT PROG TO CGHECK PARENTHESIS OF REGULAR EXPRESSION
S/W REQ: C++

#include<bits/stdc++.h>
using namespace std;

bool arebracket(string expre){
   
    stack<char> s;
 char x;
    for (int i =0; i<expre.length();i++)
    {
        if(expre[i]=='(' || expre[i]=='[' || expre[i]=='{' )
        {
            s.push(expre[i]);
            continue;
        }
         if(s.empty())
            return false;
   
        switch(expre[i])
        {
            case ')':
            x=s.top();
            s.pop();
            if(x=='{'|| x=='[')
            return false;
            break;
           
             case '}':
            x=s.top();
            s.pop();
            if(x=='('|| x=='[')
            return false;
            break;
           
             case ']':
            x=s.top();
            s.pop();
            if(x=='{'|| x=='(')
            return false;
            break;
        }
       
    }
  return (s.empty());
}
 
 int main()
 {
     string expre ="{()}[]";
     if(arebracket(expre))
        {
             cout<< " this is balance equation";
        }
         else
            {
                cout<<"this is wrong syntax";
            }
           
 return 0;
     
 }
